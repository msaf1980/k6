// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/main.RouteGuide/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetFeature(context.Context, *Point) (*Feature, error)
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct{}

func (UnimplementedRouteGuideServer) GetFeature(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RouteGuide/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _RouteGuide_GetFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route_guide.proto",
}

// TheSecondServiceClient is the client API for TheSecondService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheSecondServiceClient interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TheSecondService_ListFeaturesClient, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TheSecondService_RecordRouteClient, error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (TheSecondService_RouteChatClient, error)
}

type theSecondServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTheSecondServiceClient(cc grpc.ClientConnInterface) TheSecondServiceClient {
	return &theSecondServiceClient{cc}
}

func (c *theSecondServiceClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TheSecondService_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TheSecondService_ServiceDesc.Streams[0], "/main.TheSecondService/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &theSecondServiceListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TheSecondService_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type theSecondServiceListFeaturesClient struct {
	grpc.ClientStream
}

func (x *theSecondServiceListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *theSecondServiceClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TheSecondService_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &TheSecondService_ServiceDesc.Streams[1], "/main.TheSecondService/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &theSecondServiceRecordRouteClient{stream}
	return x, nil
}

type TheSecondService_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type theSecondServiceRecordRouteClient struct {
	grpc.ClientStream
}

func (x *theSecondServiceRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *theSecondServiceRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *theSecondServiceClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (TheSecondService_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TheSecondService_ServiceDesc.Streams[2], "/main.TheSecondService/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &theSecondServiceRouteChatClient{stream}
	return x, nil
}

type TheSecondService_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type theSecondServiceRouteChatClient struct {
	grpc.ClientStream
}

func (x *theSecondServiceRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *theSecondServiceRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TheSecondServiceServer is the server API for TheSecondService service.
// All implementations must embed UnimplementedTheSecondServiceServer
// for forward compatibility
type TheSecondServiceServer interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(*Rectangle, TheSecondService_ListFeaturesServer) error
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(TheSecondService_RecordRouteServer) error
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(TheSecondService_RouteChatServer) error
	mustEmbedUnimplementedTheSecondServiceServer()
}

// UnimplementedTheSecondServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTheSecondServiceServer struct{}

func (UnimplementedTheSecondServiceServer) ListFeatures(*Rectangle, TheSecondService_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}

func (UnimplementedTheSecondServiceServer) RecordRoute(TheSecondService_RecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
}

func (UnimplementedTheSecondServiceServer) RouteChat(TheSecondService_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}
func (UnimplementedTheSecondServiceServer) mustEmbedUnimplementedTheSecondServiceServer() {}

// UnsafeTheSecondServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheSecondServiceServer will
// result in compilation errors.
type UnsafeTheSecondServiceServer interface {
	mustEmbedUnimplementedTheSecondServiceServer()
}

func RegisterTheSecondServiceServer(s grpc.ServiceRegistrar, srv TheSecondServiceServer) {
	s.RegisterService(&TheSecondService_ServiceDesc, srv)
}

func _TheSecondService_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TheSecondServiceServer).ListFeatures(m, &theSecondServiceListFeaturesServer{stream})
}

type TheSecondService_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type theSecondServiceListFeaturesServer struct {
	grpc.ServerStream
}

func (x *theSecondServiceListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _TheSecondService_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TheSecondServiceServer).RecordRoute(&theSecondServiceRecordRouteServer{stream})
}

type TheSecondService_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type theSecondServiceRecordRouteServer struct {
	grpc.ServerStream
}

func (x *theSecondServiceRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *theSecondServiceRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TheSecondService_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TheSecondServiceServer).RouteChat(&theSecondServiceRouteChatServer{stream})
}

type TheSecondService_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type theSecondServiceRouteChatServer struct {
	grpc.ServerStream
}

func (x *theSecondServiceRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *theSecondServiceRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TheSecondService_ServiceDesc is the grpc.ServiceDesc for TheSecondService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheSecondService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.TheSecondService",
	HandlerType: (*TheSecondServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _TheSecondService_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _TheSecondService_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _TheSecondService_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "route_guide.proto",
}
